package org.drools.planner.examples.tournaments;

import org.drools.planner.core.score.calculator.HardAndSoftConstraintScoreCalculator;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import org.drools.planner.examples.tournaments.model.Match;
import org.drools.planner.examples.tournaments.model.PauseMatch;
import org.drools.planner.examples.tournaments.model.TeamsMatch;
import org.drools.planner.examples.tournaments.model.Team;
import org.drools.planner.examples.tournaments.model.Slot;

import java.util.Arrays;
import java.util.Collection;

global HardAndSoftConstraintScoreCalculator scoreCalculator;

rule "Find out how many minimal distances between matches have been broken"
    when
		$s1: Slot($m1: match)
		$s2: Slot(this != $s1, this.isMinimalDistanceBroken($s1), $m2: match)
		TeamsMatch(this == $m1, this.areTeamsShared($m2))
    then
        insertLogical(
			new IntConstraintOccurrence("minimumDistanceBroken", ConstraintType.NEGATIVE_HARD,
                1, $m1, $s1, $s2)        
        );
end

rule "Find out how many slots share a single match"
    when
        $s1: Slot($m: match)
        accumulate(
            $slot: Slot(this != $s1, $m == match),
            $count: count($slot)
        )
    then
        insertLogical(
			new IntConstraintOccurrence("singleMatchShared", ConstraintType.NEGATIVE_HARD,
                $count.intValue() * 10, $m)        
        );
end

rule "Team has too big delay"
    when
    	$t: Team()
    	$s1: Slot($num1: number, teams contains $t)
    	$s2: Slot($num1 < number, $num2: number, teams contains $t)
    	not Slot($num1 < number, $num2 > number, teams contains $t) 
    then
    	insertLogical(
    		new IntConstraintOccurrence("teamWaitTime", ConstraintType.NEGATIVE_SOFT,
    			Math.max(0, Math.abs($num1 - $num2) - 2), $t, $s1, $s2)
    	);
end 

/*rule "Get overhead per team"
    when
        $t: Team()
        accumulate(
            $s: Slot($num: number, match != null, $ts: teams, teams contains $t),
            $min: min($num),
            $max: max($num),
            $slist: collectList($s),
            $sset: collectSet($s),
            $tslist: collectList($ts),
            $count: count($s)
        )
    then
    	System.out.println($t.toString() + " " + $count.intValue() + " " + Arrays.toString($tslist.toArray()) + " " + $tslist.contains($t));   	
        // ((max - min + 1) / min_slots_per_match) - count
        System.out.println("@" + $sset.toArray().length + " " + $slist.toArray().length);
        System.out.println(drools.getWorkingMemory().toString() + " " + Arrays.toString($slist.toArray()) + " " + $t + " " + $min.intValue() + " " + $max.intValue() + " " + $count.intValue() +
          " " + ($count.intValue() < 2 ? 0 : Math.max(0, (($max.intValue() - $min.intValue() + 1) / 2 - $count.intValue()))));
        insertLogical(
			new IntConstraintOccurrence("teamOverhead", ConstraintType.NEGATIVE_SOFT,
			    $sset.size() < 2 ? 0 :
                Math.max(0, (($max.intValue() - $min.intValue() + 1) / 2 - $sset.size())), $t)        
        );
end*/

rule "Hard score means how many teams have matches directly adjacent"
	salience -1
    when
        $total : Number () from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight)
        )
    then
        scoreCalculator.setHardConstraintsBroken($total.intValue());
end

rule "Soft score is a sum of all the overheads"
	salience -1
    when
        $total : Number () from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight: weight),
            sum($weight)
        )
    then
        scoreCalculator.setSoftConstraintsBroken($total.intValue());
end
